/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.hypertable.thriftgen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Describes a schema
 * <dl>
 *   <dt>name</dt>
 *   <dd>Name of the access group</dd>
 * 
 *   <dt>in_memory</dt>
 *   <dd>Is this access group in memory</dd>
 * 
 *   <dt>replication</dt>
 *   <dd>Replication factor for this AG</dd>
 * 
 *   <dt>blocksize</dt>
 *   <dd>Specifies blocksize for this AG</dd>
 * 
 *   <dt>compressor</dt>
 *   <dd>Specifies compressor for this AG</dd>
 * 
 *   <dt>bloom_filter</dt>
 *   <dd>Specifies bloom filter type</dd>
 * 
 *   <dt>columns</dt>
 *   <dd>Specifies list of column families in this AG</dd>
 * </dl>
 */
public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Schema");

  private static final org.apache.thrift.protocol.TField ACCESS_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("access_groups", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_FAMILIES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_families", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchemaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchemaTupleSchemeFactory());
  }

  public Map<String,AccessGroup> access_groups; // optional
  public Map<String,ColumnFamily> column_families; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCESS_GROUPS((short)1, "access_groups"),
    COLUMN_FAMILIES((short)2, "column_families");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_GROUPS
          return ACCESS_GROUPS;
        case 2: // COLUMN_FAMILIES
          return COLUMN_FAMILIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ACCESS_GROUPS,_Fields.COLUMN_FAMILIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("access_groups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessGroup.class))));
    tmpMap.put(_Fields.COLUMN_FAMILIES, new org.apache.thrift.meta_data.FieldMetaData("column_families", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnFamily.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Schema.class, metaDataMap);
  }

  public Schema() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Schema(Schema other) {
    if (other.isSetAccess_groups()) {
      Map<String,AccessGroup> __this__access_groups = new HashMap<String,AccessGroup>();
      for (Map.Entry<String, AccessGroup> other_element : other.access_groups.entrySet()) {

        String other_element_key = other_element.getKey();
        AccessGroup other_element_value = other_element.getValue();

        String __this__access_groups_copy_key = other_element_key;

        AccessGroup __this__access_groups_copy_value = new AccessGroup(other_element_value);

        __this__access_groups.put(__this__access_groups_copy_key, __this__access_groups_copy_value);
      }
      this.access_groups = __this__access_groups;
    }
    if (other.isSetColumn_families()) {
      Map<String,ColumnFamily> __this__column_families = new HashMap<String,ColumnFamily>();
      for (Map.Entry<String, ColumnFamily> other_element : other.column_families.entrySet()) {

        String other_element_key = other_element.getKey();
        ColumnFamily other_element_value = other_element.getValue();

        String __this__column_families_copy_key = other_element_key;

        ColumnFamily __this__column_families_copy_value = new ColumnFamily(other_element_value);

        __this__column_families.put(__this__column_families_copy_key, __this__column_families_copy_value);
      }
      this.column_families = __this__column_families;
    }
  }

  public Schema deepCopy() {
    return new Schema(this);
  }

  @Override
  public void clear() {
    this.access_groups = null;
    this.column_families = null;
  }

  public int getAccess_groupsSize() {
    return (this.access_groups == null) ? 0 : this.access_groups.size();
  }

  public void putToAccess_groups(String key, AccessGroup val) {
    if (this.access_groups == null) {
      this.access_groups = new HashMap<String,AccessGroup>();
    }
    this.access_groups.put(key, val);
  }

  public Map<String,AccessGroup> getAccess_groups() {
    return this.access_groups;
  }

  public Schema setAccess_groups(Map<String,AccessGroup> access_groups) {
    this.access_groups = access_groups;
    return this;
  }

  public void unsetAccess_groups() {
    this.access_groups = null;
  }

  /** Returns true if field access_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetAccess_groups() {
    return this.access_groups != null;
  }

  public void setAccess_groupsIsSet(boolean value) {
    if (!value) {
      this.access_groups = null;
    }
  }

  public int getColumn_familiesSize() {
    return (this.column_families == null) ? 0 : this.column_families.size();
  }

  public void putToColumn_families(String key, ColumnFamily val) {
    if (this.column_families == null) {
      this.column_families = new HashMap<String,ColumnFamily>();
    }
    this.column_families.put(key, val);
  }

  public Map<String,ColumnFamily> getColumn_families() {
    return this.column_families;
  }

  public Schema setColumn_families(Map<String,ColumnFamily> column_families) {
    this.column_families = column_families;
    return this;
  }

  public void unsetColumn_families() {
    this.column_families = null;
  }

  /** Returns true if field column_families is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_families() {
    return this.column_families != null;
  }

  public void setColumn_familiesIsSet(boolean value) {
    if (!value) {
      this.column_families = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCESS_GROUPS:
      if (value == null) {
        unsetAccess_groups();
      } else {
        setAccess_groups((Map<String,AccessGroup>)value);
      }
      break;

    case COLUMN_FAMILIES:
      if (value == null) {
        unsetColumn_families();
      } else {
        setColumn_families((Map<String,ColumnFamily>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_GROUPS:
      return getAccess_groups();

    case COLUMN_FAMILIES:
      return getColumn_families();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_GROUPS:
      return isSetAccess_groups();
    case COLUMN_FAMILIES:
      return isSetColumn_families();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Schema)
      return this.equals((Schema)that);
    return false;
  }

  public boolean equals(Schema that) {
    if (that == null)
      return false;

    boolean this_present_access_groups = true && this.isSetAccess_groups();
    boolean that_present_access_groups = true && that.isSetAccess_groups();
    if (this_present_access_groups || that_present_access_groups) {
      if (!(this_present_access_groups && that_present_access_groups))
        return false;
      if (!this.access_groups.equals(that.access_groups))
        return false;
    }

    boolean this_present_column_families = true && this.isSetColumn_families();
    boolean that_present_column_families = true && that.isSetColumn_families();
    if (this_present_column_families || that_present_column_families) {
      if (!(this_present_column_families && that_present_column_families))
        return false;
      if (!this.column_families.equals(that.column_families))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Schema other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Schema typedOther = (Schema)other;

    lastComparison = Boolean.valueOf(isSetAccess_groups()).compareTo(typedOther.isSetAccess_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccess_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.access_groups, typedOther.access_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumn_families()).compareTo(typedOther.isSetColumn_families());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_families()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_families, typedOther.column_families);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Schema(");
    boolean first = true;

    if (isSetAccess_groups()) {
      sb.append("access_groups:");
      if (this.access_groups == null) {
        sb.append("null");
      } else {
        sb.append(this.access_groups);
      }
      first = false;
    }
    if (isSetColumn_families()) {
      if (!first) sb.append(", ");
      sb.append("column_families:");
      if (this.column_families == null) {
        sb.append("null");
      } else {
        sb.append(this.column_families);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchemaStandardSchemeFactory implements SchemeFactory {
    public SchemaStandardScheme getScheme() {
      return new SchemaStandardScheme();
    }
  }

  private static class SchemaStandardScheme extends StandardScheme<Schema> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Schema struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCESS_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.access_groups = new HashMap<String,AccessGroup>(2*_map64.size);
                for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                {
                  String _key66; // required
                  AccessGroup _val67; // required
                  _key66 = iprot.readString();
                  _val67 = new AccessGroup();
                  _val67.read(iprot);
                  struct.access_groups.put(_key66, _val67);
                }
                iprot.readMapEnd();
              }
              struct.setAccess_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_FAMILIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                struct.column_families = new HashMap<String,ColumnFamily>(2*_map68.size);
                for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                {
                  String _key70; // required
                  ColumnFamily _val71; // required
                  _key70 = iprot.readString();
                  _val71 = new ColumnFamily();
                  _val71.read(iprot);
                  struct.column_families.put(_key70, _val71);
                }
                iprot.readMapEnd();
              }
              struct.setColumn_familiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Schema struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.access_groups != null) {
        if (struct.isSetAccess_groups()) {
          oprot.writeFieldBegin(ACCESS_GROUPS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.access_groups.size()));
            for (Map.Entry<String, AccessGroup> _iter72 : struct.access_groups.entrySet())
            {
              oprot.writeString(_iter72.getKey());
              _iter72.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_families != null) {
        if (struct.isSetColumn_families()) {
          oprot.writeFieldBegin(COLUMN_FAMILIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_families.size()));
            for (Map.Entry<String, ColumnFamily> _iter73 : struct.column_families.entrySet())
            {
              oprot.writeString(_iter73.getKey());
              _iter73.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchemaTupleSchemeFactory implements SchemeFactory {
    public SchemaTupleScheme getScheme() {
      return new SchemaTupleScheme();
    }
  }

  private static class SchemaTupleScheme extends TupleScheme<Schema> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccess_groups()) {
        optionals.set(0);
      }
      if (struct.isSetColumn_families()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAccess_groups()) {
        {
          oprot.writeI32(struct.access_groups.size());
          for (Map.Entry<String, AccessGroup> _iter74 : struct.access_groups.entrySet())
          {
            oprot.writeString(_iter74.getKey());
            _iter74.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumn_families()) {
        {
          oprot.writeI32(struct.column_families.size());
          for (Map.Entry<String, ColumnFamily> _iter75 : struct.column_families.entrySet())
          {
            oprot.writeString(_iter75.getKey());
            _iter75.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Schema struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.access_groups = new HashMap<String,AccessGroup>(2*_map76.size);
          for (int _i77 = 0; _i77 < _map76.size; ++_i77)
          {
            String _key78; // required
            AccessGroup _val79; // required
            _key78 = iprot.readString();
            _val79 = new AccessGroup();
            _val79.read(iprot);
            struct.access_groups.put(_key78, _val79);
          }
        }
        struct.setAccess_groupsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.column_families = new HashMap<String,ColumnFamily>(2*_map80.size);
          for (int _i81 = 0; _i81 < _map80.size; ++_i81)
          {
            String _key82; // required
            ColumnFamily _val83; // required
            _key82 = iprot.readString();
            _val83 = new ColumnFamily();
            _val83.read(iprot);
            struct.column_families.put(_key82, _val83);
          }
        }
        struct.setColumn_familiesIsSet(true);
      }
    }
  }

}

